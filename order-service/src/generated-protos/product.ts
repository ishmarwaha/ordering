// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.3
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

/** Define the Product message */
export interface Product {
  id: number;
  name: string;
  description: string;
  availableQuantity: number;
  price: number;
}

/** Request and response messages for the Get operation */
export interface GetRequest {
  id: number;
}

export interface GetResponse {
  product: Product | undefined;
}

/** Request and response messages for the Create operation */
export interface CreateRequest {
  name: string;
  description: string;
  availableQuantity: number;
  price: number;
}

export interface CreateResponse {
  product: Product | undefined;
}

/** Request and response messages for the Update operation */
export interface UpdateRequest {
  product: Product | undefined;
}

export interface UpdateResponse {
  product: Product | undefined;
}

/** Request and response messages for the Delete operation */
export interface DeleteRequest {
  id: number;
}

export interface DeleteResponse {
  success: boolean;
}

export interface DeductQuantity {
  id: number;
  requestedQuantity: number;
}

export interface DeductQuantityRequest {
  deductQuantities: DeductQuantity[];
}

export interface DeductQuantityResponse {
  success: boolean;
}

export const PRODUCT_PACKAGE_NAME = "product";

/** Define the ProductService with CRUD operations */

export interface ProductServiceClient {
  /** Create a new product */

  create(request: CreateRequest): Observable<CreateResponse>;

  /** Get a product by ID */

  get(request: GetRequest): Observable<GetResponse>;

  /** Update a product by ID */

  update(request: UpdateRequest): Observable<UpdateResponse>;

  /** Delete a product by ID */

  delete(request: DeleteRequest): Observable<DeleteResponse>;

  /**
   * Checks if the requested product quantites are available
   * and deducts thems
   */

  deductProductQuantity(request: DeductQuantityRequest): Observable<DeductQuantityResponse>;
}

/** Define the ProductService with CRUD operations */

export interface ProductServiceController {
  /** Create a new product */

  create(request: CreateRequest): Promise<CreateResponse> | Observable<CreateResponse> | CreateResponse;

  /** Get a product by ID */

  get(request: GetRequest): Promise<GetResponse> | Observable<GetResponse> | GetResponse;

  /** Update a product by ID */

  update(request: UpdateRequest): Promise<UpdateResponse> | Observable<UpdateResponse> | UpdateResponse;

  /** Delete a product by ID */

  delete(request: DeleteRequest): Promise<DeleteResponse> | Observable<DeleteResponse> | DeleteResponse;

  /**
   * Checks if the requested product quantites are available
   * and deducts thems
   */

  deductProductQuantity(
    request: DeductQuantityRequest,
  ): Promise<DeductQuantityResponse> | Observable<DeductQuantityResponse> | DeductQuantityResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["create", "get", "update", "delete", "deductProductQuantity"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
